const {
  CostExplorerClient,
  GetCostAndUsageCommand,
} = require("@aws-sdk/client-cost-explorer");
const AsciiTable = require('ascii-table')

const sendToSlack = async (text) => {
  const url = process.env.SLACK_WEBHOOK_URL

  const payload = JSON.stringify({
    channel: process.env.SLACK_CHANNEL,
    username: process.env.SLACK_USERNAME || "aws cost",
    text,
    icon_emoji: process.env.SLACK_ICON_EMOJI || ":ghost:",
  })

  return await fetch(url, {
    method: 'POST',
    body: new URLSearchParams({ payload }),
  });
}

const client = new CostExplorerClient({ region: "us-east-1" });

const params = {
  TimePeriod: {
    Start: new Date(
      Date.now() - 7 * 24 * 60 * 60 * 1000
    ).toISOString().split("T")[0],
    End: new Date().toISOString().split("T")[0],
  },
  Granularity: "DAILY",
  Metrics: ["BlendedCost"],
  GroupBy: [
    { Type: "DIMENSION", Key: "SERVICE" }
  ]
};

const command = new GetCostAndUsageCommand(params);

module.exports = async () => {
  const data = await client.send(command)

  const results = data.ResultsByTime;

  let start = ""
  let end = ""
  let costs = {}

  results.forEach((result) => {
    if ( start === "" ) {
      start = result.TimePeriod.Start
    }

    end = result.TimePeriod.End

    const timePeriod = result.TimePeriod;
    const groups = result.Groups;

    groups.forEach((group) => {
      const key = group.Keys.join(", ");
      const cost = group.Metrics.BlendedCost.Amount;

      costs[key] ||= 0.0
      costs[key] += parseFloat(cost)
    })

  })

  let table = new AsciiTable(`${start} - ${end}`)

  for ( const s in costs ) {
    table.addRow(s, `$ ${costs[s].toFixed(2)}`)
  }

  const body = `
\`\`\`
${table.toString()}
\`\`\`
`
  const res = await sendToSlack(body);

  return (await res.text())
}
